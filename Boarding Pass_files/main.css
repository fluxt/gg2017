/*
 * Attribution - code uses portions of the following - 
 *
 * Fix
 * Version 0.1.1
 * https://github.com/jaydenseric/Fix
 * @license MIT
 *
 * siimple - Minimal CSS framework for flat and clean designs.
 * @version v1.3.6
 * @link https://siimple.juanes.xyz/
 * @license MIT
 */
 


 /*  Import Google web fonts.  */ 
@import url("https://fonts.googleapis.com/css?family=Roboto:400,300,700");



/* 
 * Box-sizing reset is best practice. https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/
 * Text-size-adjust prevents adjustments of font size after orientation changes in IE and iOS. 
 * Font-smoothing controls the application of anti-aliasing when fonts are rendered. https://developer.mozilla.org/en-US/docs/Web/CSS/font-smooth
 * overflow-y puts a vertical scrollbar in the window. This prevents a page shift when collapsible table data expands and makes the page longer.
 */
html {
  box-sizing: border-box;
      -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  -moz-osx-font-smoothing: grayscale;
   -webkit-font-smoothing: antialiased;
  overflow-y: scroll;
}

*, *:before, *:after {
  box-sizing: inherit;
}

body {
  display: flex;
  flex-direction: column;
  min-height: 100%;
  height: 100vh;
  margin: 0;
  font: 300 12px/1.5 "Roboto", sans-serif;
  background: #fff;
  color: #526475;
}

/*  Add the correct display for HTML5 semantic elements in IE 9-.  */
article,
aside,
figcaption,
figure,
footer,
header,
main,
nav,
section {
  display: block;
}

/*
 * overflow: visible brings IE into line. 
 * The border, font, letter-spacing and background rules conveniently reset the native appearance in all browsers. 
 * The -webkit-font-smoothing rule fixes buggy inheritance. 
 * For UX reasons and consistency with links it is a good idea to give all buttons a pointer cursor.
 */
button {
  overflow: visible;
  border: 0;
  font: inherit;
  -webkit-font-smoothing: inherit;
  letter-spacing: inherit;
  background: none;
  cursor: pointer;
}

/*  This undoes a psuedo-element Firefox adds inside buttons that causes them to display larger than expected.  */
::-moz-focus-inner {
  padding: 0;
  border: 0;
}

caption {
  padding: .75rem 0;
  text-align: left;
}

footer {
  flex-shrink: 0;
  margin-top: 1.5rem;
  border-top: 1px solid #d1e1e8;
  background-color: #707070;
  color: #fff;
}

header {
  flex-shrink: 0;
  margin-bottom: 1.5rem;
  padding-top: 0;
  background: #f6f8fa;
  border-bottom: 1px solid #d1e1e8;
}

/*
 * Makes sure images respect the bounds of a fluid container. The image's aspect ratio is preserved even if it has an inline height set.
 * border: 0 fixes images within links gaining a border in IE 8, 9 and 10.
 */
img {
  height: auto;
  max-width: 100%;
  border: 0 none;
  vertical-align: middle;
}

label {
  display: inline-block;
  max-width: 100%;
  margin: .75rem 0 .375rem 0;
}

legend {
  padding-left: 0;
  padding-bottom: .375rem;
}

main {
  flex: 1 0 auto;
}

table {
  display: table;
  width: 100%;
  margin: 0 0 1.5rem 0; 
  border-collapse: collapse;
}

th, 
td {
  padding: 1rem;
  border-bottom: 1px solid #d1e1e8;  
  text-align: left; 
}

th {
  font-weight: 700;
  background: #f6f8fa;
  border-bottom: 2px solid #d1e1e8;  
}

hr {
	color: #d1e1e8;
}

/***
 * Styleguide Topics:
 * <br>
 *  + [Color Palette](styleguides.html#color-palette)
 *  + [Typography, Links, and Lists](styleguides.html#typography-links-and-lists)
 *  + [Layout](styleguides.html#layout)
 *  + [Buttons](styleguides.html#buttons)
 *  + [Forms](styleguides.html#forms)
 *  + [Tables](styleguides.html#tables) 
 *  + [Panels](styleguides.html#panels)
 *  + [Alerts](styleguides.html#alerts)
 */



/***
 * Color Palette:
 *
 *     @example
 *     <div style="background: #526475; height: 125px; width: 125px; float: left; margin-right: 20px;"></div>
 *     <div style="background: #0070d2; height: 125px; width: 125px; float: left; margin-right: 20px;"></div>
 *     <div style="background: #d1e1e8; height: 125px; width: 125px; float: left; margin-right: 20px;"></div>
 *     <div style="background: #f6f8fa; height: 125px; width: 125px; float: left; margin-right: 20px; border: 1px solid #d1e1e8;"></div> 
 *     <div style="background: #ffffff; height: 125px; width: 125px; float: left; margin-right: 20px; border: 1px solid #d1e1e8;"></div>
 *      <div style="clear:both;"></div>
 *     <div style="height: 125px; width: 125px; float: left; margin-right: 20px;"><span style="font-weight: 400;">#526475</span><br> Main text color</div>  
 *     <div style="height: 125px; width: 125px; float: left; margin-right: 20px;"><span style="font-weight: 400;">#0070d2</span><br> Main accent color</div> 
 *     <div style="height: 125px; width: 125px; float: left; margin-right: 20px;"><span style="font-weight: 400;">#d1e1e8</span><br> Disabled form control color</div>  
 *     <div style="height: 125px; width: 125px; float: left; margin-right: 20px;"><span style="font-weight: 400;">#f6f8fa</span><br> Shaded background color</div>  
 *     <div style="height: 125px; width: 125px; float: left; margin-right: 20px;"><span style="font-weight: 400;">#ffffff</span><br> Main background color</div>
 */



/* ***************************** 
 *  Text Styles, Headings, Links, Lists 
 * *****************************/

/***
 * Typography, Links, and Lists:
 * Accessibility
 *  + Semantic markup is used to designate headings, lists, emphasized or special text, etc. Semantic markup is used appropriately.
 *  + The [contrast ratio](http://webaim.org/resources/contrastchecker/)&nbsp;of text to background should be at least 4.5:1, preferably 7:1. 
 *  + Users should be able to identify links without relying on color alone; tab to navigate between links; 
 *  activate a link when pressing Enter on their keyboard; and activate hover and focus states with both a mouse and a keyboard.  
 *  + The purpose of each link can be determined from the link text alone.
 *  + There are no links with the same text that go to different locations.
 *  + The page is readable and functional when the text size is doubled.
 *  + Blocks of text over one sentence in length:
 *      - Are somewhere between 55 and 75 characters per line (66 characters is considered the ideal).
 *      - Are NOT fully justified (aligned to both the left and the right margins). Prefer left-aligned text.
 *      - Have adequate line spacing (at least 1/2 the height of the text) and paragraph spacing (1.5 times line spacing).
 *      - Do NOT require horizontal scrolling when the text size is doubled.
 * 
 * Usability
 *  + White space affects how the user focuses their attention on the content. 
 *  Spacing between typographic elements should be open enough to feel light, but close enough to establish a proper relationship between elements.
 *  
 * Guidance
 *  + Use the font family [Roboto](https://fonts.google.com/specimen/Roboto), hosted from Google Fonts. 
 *  Choose from three weights: 300, for body text and headings; 400, for text requiring a medium weight; and 700 for bold or important text and table headings.
 */

/**
 * Headings:
 * Headings have standard margins and are sized via a [modular scale](http://www.modularscale.com), with a ratio of 1.125.
 *
 *     @example
 *     h1 Heading 1
 *     h2 Heading 2
 *     h3 Heading 3
 */

/**
 * Paragraphs:
 * Add the `.small` class for small text. Use the `strong` tag for important text.  
 * 
 * According to the HTML 5 specification, the `b` tag should be used as a last resort when no other tag is more appropriate. 
 * The spec states that emphasized text should be denoted with the `em` tag, and important text should be denoted with the `strong` tag.
 *
 *     @example
 *     p Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eius adipisci, sed libero. 
 *       Iste asperiores suscipit, consequatur debitis animi impedit numquam facilis iusto porro labore dolorem, maxime magni incidunt. Delectus, est!  
 *     p 
 *      strong This is important text.
 *     p  
 *      small This is small text.
 */ 

/**
 * Lists:
 * Use an ordered list when you need to display text in some ranking, hierarchy, or series of steps.
 * Use unordered lists to display text in no specific order.
 *  
 * Use sentence case and begin lists with a capital letter. Use punctuation appropriate to the text. Do not leave sentences without periods.
 *
 *     @example
 *     ul
 *       li Unordered list item
 *       li Unordered list item
 *       li Unordered list item
 *     ol
 *       li Ordered list item
 *       li Ordered list item
 *       li Ordered list item
 *    
 *     ul
 *       li List item
 *       li List item
 *         ul
 *           li Nested list item
 *           li Nested list item
 *       li List item 
 */

/**
 * Links:
 * Links are styled with the guide's stated accent color. Visited links feature a contrasting color. Hover and focus states feature an underline. 
 * Links to external websites have the class `.link-external` and feature an icon signaling to the user that they are leaving the site.
 * 
 *     @example
 *     <p><a href="javascript:void(0);">This is a link.</a>
 *     <p><a class="link-external" href="javascript:void(0);">This is a link to an external website.</a> 
 */

p {
  margin: 0 0 1.5rem 0;
}

a {
  color: #0070D2;
  text-decoration: none;
  transition: all 0.3s; 
}

a:visited {
  color: #9B4DCA;
}

a:hover,
a:focus {
  text-decoration: underline;
}

footer a,
footer a:visited {
    color: #fff;
    text-decoration: underline; 
}

.link-external::after {
  content: "";
  display: inline-block;
  height: 18px;
  width: 18px; 
  margin: 0 .375rem;
  background: rgba(255, 255, 255, .5) url("ic_launch_black_18dp_1x.png") no-repeat 0 0;
  background-blend-mode: overlay;
  vertical-align: text-bottom;
}

.link-external:hover::after {
  background-blend-mode: normal;
}

ul, 
ol {
  margin: 0 0 1.5rem 0;
}

ul li, 
ol li {
  margin: 0 0 .375rem 0;
  line-height: 1.5; 
}

/*  Adjust margins for nested lists  */
li ul,
li ol {
  margin: .375rem 0;
}

/*  List-style-none for inline lists, as in nav bar  */
.list-none {
  margin: 0;
  padding: 0;
  overflow: hidden;
  list-style-type: none;
}

.list-none li {
  display: inline-block;
  margin-right: 1.5rem;
  margin-bottom: 0;
}

h1,h2, 
h3 {
  display: block;
  margin: 0 0 .375rem 0;
  font-weight: 300;
  line-height: 3rem;
}

h1 { font-size: 1.424rem; 
color: #000; 
font-weight: 400;
}
h2 { font-size: 1.266rem; }
h3 { font-size: 1.125rem; }

small {
  font-size: .889rem;
}

/*  This corrects some browsers defaulting to bolder.  */
b,
strong {
  font-weight: 700;
}



/* ***************************** 
 * Layout  
 * *****************************/


/***
 * Layout:
 */

/**
 * Accessibility
 *  + Low-vision users should be able to increase the size of the text by up to 200 percent without breaking the layout.
 * 
 * Usability
 *  + Avoid text lines longer than 75 characters. Place text in narrower grid boxes to keep text lines from becoming too wide.
 * 
 * Guidance
 *  + Use the `.wrapper` class to establish a fixed-width container (1080px) that is centered on the web page. Add the `.full` class if you want an element to take up 100% of its parent's width.
 *  + The Flexbox Layout (Flexible Box) module aims to provide an efficient way to lay out, align, and distribute space among items in a container, 
 *  even when their size is unknown and/or dynamic (thus the word "flex").
 *  + A flex container has the ability to alter its items' width/height (and order) to best fill the available space. A flex container expands items to fill available free space, or shrinks them to prevent overflow.
 *  + By default, flex item is the same width and height as every other item in its container. Basically they all size to fit by default, but you can add sizing classes to individual cells. 
 *  Without these classes, the cells simply divide up the available space as usual.
 *  + For responsive designs, you can add media query-specific classes.
 *  + Individual cells can be aligned vertically to the top, bottom, or middle.
 *  + See [A Complete Guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) 
 *  and [Flexbox in CSS](http://cssreference.io/flexbox/) 
 *  for details on implementing and using flexbox.
 */

/**
 * Flex elements with equal widths:
 * Use the `.flex-container` class on an element to create a flex container. It enables a flex context for all of its direct children.
 * 
 * Add the `.flex-item` class to every child element. You can include any number of child elements.
 *
 *     @example
 *     div.wrapper.flex-container
 *       div.flex-item Equal-width flex item
 *       div.flex-item Equal-width flex item
 *       div.flex-item Equal-width flex item
 *       div.flex-item Equal-width flex item
 */

 /**
 * Flex elements with defined widths:
 * Use the `.flex-item-set` class on a child element and declare its width using one of the following classes: 
 * `.width-full`, `.width-half`, `.width-third`, or `.width-quarter`.
 *
 *     @example
 *     div.wrapper.flex-container
 *       div.flex-item-set.width-full Full-width flex item
 *       div.flex-item-set.width-half Half-width flex item
 *       div.flex-item-set.width-half Half-width flex item
 *       div.flex-item-set.width-quarter Quarter-width flex item
 *       div.flex-item-set.width-quarter Quarter-width flex item; note that if the content takes up extra vertical space, all items on the same line size appropriately, unless you've declared an item's alignment.
 *       div.flex-item-set.width-quarter.align-center Quarter-width flex item, center-aligned
 *       div.flex-item-set.width-quarter.align-end Quarter-width flex item, bottom-aligned     
 */

 /**
 * Flex containers with 100% width:
 * Add the `.full` class to create a full-width flex container. 
 * It will take up the entire viewport width unless you also include the `.wrapper` class to constrain it.
 * 
 * Its child flex elements may be equal- or defined-width elements.
 *
 *     @example
 *     div.full.flex-container
 *       div.flex-item-set.width-full Full-width flex item
 *       div.flex-item-set.width-half Half-width flex item
 *       div.flex-item-set.width-third Third-width flex item
 */

  /**
 * Flexbox layout with nested elements:
 * No special classes are needed to nest flex containers within flex elements.
 *
 *     @example
 *     div.wrapper.flex-container
 *       div.flex-item Equal-width flex item
 *         div.flex-container
 *           div.flex-item-set.width-third Third-width flex item, nested
 *           div.flex-item-set.width-third Third-width flex item, nested
 *           div.flex-item-set.width-third Third-width flex item, nested  
 *       div.flex-item Equal-width flex item
 *       div.flex-item-set.width-full Full-width flex item
 *         div.flex-container
 *           div.flex-item Equal-width flex item, nested
 *           div.flex-item Equal-width flex item, nested
 *           div.flex-item Equal-width flex item, nested 
 *           div.flex-item Equal-width flex item, nested
 */

.wrapper {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0;
}

/* Apply consistent padding to wrappers that are not flex containers, like DataTables */
.wrapper:not(.flex-container) {
  padding: 2rem;
}

.full {
  width: 100%;
  max-width: 100%;
}

.flex-container {
  display: -webkit-box;      /* OLD - iOS 6-, Safari 3.1-6 */
  display: -webkit-flex;     /* NEW - Chrome */
  display: -ms-flexbox;      /* TWEENER - IE 10 */
  display: flex;             /* NEW, Spec - Opera 12.1, Firefox 20+ */
  -webkit-flex-flow: row wrap;
          flex-flow: row wrap;            
}

/* Use with equal-width items */
.flex-item {
  -webkit-box-flex: 1;
  -webkit-flex: 1;
      -ms-flex: 1;
          flex: 1;
}

/* Use with defined-width items before declaring width */
.flex-item-set {
  -webkit-box-flex: 0 0 0;
  -webkit-flex: 0 0 0;
      -ms-flex: 0 0 0;
          flex: 0 0 0;
}

.width-full { flex-basis: 100%; }
.width-half { flex-basis: 50% }
.width-third { flex-basis: 33.33% }
.width-quarter { flex-basis: 25% }

/* 
 * Apply padding to all (equal-width and defined-width) flex items. 
 * This should match the padding on the .wrapper class.
 */
[class*="flex-item"] {
  padding: 2rem;
}

/* Remove R/L padding from nested flex items */
[class*="flex-item"] [class*="flex-item"] {
  padding: 2rem 0;
}

/* Flex items are able to align independently from other elements in their row with the align-self property. */
.align-center {
  align-self: center;
}

.align-end {
  align-self: flex-end;
}

.grid {
  border: solid 1px #e7e7e7;
}

.grid__row {
  display: flex;
  padding: 0px 12px;
}

.grid__item {
  flex: 1;
  padding: 12px 12px;
  border: solid 0px #e7e7e7;
}

.grid__photo {
  padding: 12px 0px;
  border: solid 0px #e7e7e7;
}
/* ***************************** 
 * Button Styles 
 * *****************************/

/***
 * Buttons:
 */

/**
 * Accessibility
 *  + Buttons should display a visible focus state when users tab to them.
 *  + Avoid using `div` or `img` tags to create buttons. Screen readers don't automatically know either is a usable button.
 *  + When styling links to look like buttons, remember that screen readers handle links slightly differently than they do buttons. 
 *
 * Usability
 *  + Use buttons for the most important actions you want users to take on your site.
 *  + If you want to lead users between pages of a website, use links instead.
 *  + Less popular or less important actions may be visually styled as links.
 *
 * Guidance
 *  + Generally, use primary buttons for actions that go to the next step and use secondary buttons for actions that happen on the current page.
 *  + Style the button most users should click in a way that distinguishes from other buttons on the page.
 *  + Make sure buttons should look clickable. Use color variations to distinguish static, hover and active states.
 *  + Avoid using too many buttons on a page.
 *  + Use sentence case for button labels.
 *  + Button labels should be as short as possible with "trigger words" that your users will recognize to clearly explain what will happen when the button is clicked (for example, "Download" or "Sign up").
 *  + Always specify the type attribute for a button element. Different browsers use different default types for the button element.
 *  + Make the first word of the button's label a verb. For example, instead of "Complaint Filing" label the button "File a complaint."
 */

/**
 * Button:
 * Add a `.btn` class to an element to create a button.
 * 
 * You can change the button size by adding the `.btn-small` or `.btn-big` class.
 *
 *     @example
 *     button.btn.btn-small Small button
 *     button.btn Primary button
 *     button.btn.btn-big Big button
 */

/**
 * Outline Button:
 * After you add a `.btn` class to an element, add the `.btn-outline` class to create an outline button. 
 * 
 * You can change the button size by also including the `.btn-small` or `.btn-big` class.
 *
 *     @example
 *     a.btn.btn-small.btn-outline Small button
 *     a.btn.btn-outline Primary button
 *     a.btn.btn-big.btn-outline Big button
 */

/*  Button padding in em units so it resizes proportionally with changing font sizes in small/big buttons  */
.btn [type="button"]{
  display: inline-block;
  margin: 12px 0 24px 12px;
  padding: .25em 1em;
  line-height: 2;
  background-color: #0070D2;
  border: 0;  
  border-radius: 5px;
  color: #fff;
  text-align: center;
  cursor: pointer;
  transition: all 0.3s;
} 



.btn:hover {
  opacity: 0.8; 
  text-decoration: none;
}

.btn-small {
  font-size: .889rem;
}

.btn-big {
  font-size: 1.25rem;
}

.btn-outline {
  background: transparent;
  border: 1px solid currentColor; 
  color: #0070D2;
}

.btn-outline:hover {
  background: #0070D2;
  color: #fff;
  opacity: 1; 
}



/* ***************************** 
 * Form styles  
 * *****************************/

/***
 * Forms:
 */

/**
 * Accessibility
 *  + Most browsers' default rendering of placeholder text does not provide a high enough contrast ratio. Style or avoid placeholder text.
 *  + Avoid breaking numbers with distinct sections (phone numbers, SSNs, or credit card numbers) into separate input fields. 
 *  + The length of the text input affords the length of the answer, i.e., the length of the field provides a hint to users as to how much text to write.
 *  + Make sure form controls are properly labeled.
 *  + Use a single legend for a fieldset (this is required). Embed multiple fieldsets and legends for more complex forms.
 *  + Read more about [accessible forms](https://www.w3.org/WAI/tutorials/forms/), or recommendations for [better form design](https://uxdesign.cc/design-better-forms-96fadca0f49c#.oqq2hq23g).
 *
 * Usability
 *  + Keep your form blocks (labels, text inputs, radio buttons, checkboxes, etc.) in a vertical pattern. 
 *  + Use dropdowns sparingly&mdash;only when a user needs to choose from about seven to 15 possible options and you have limited space to display the options.
 *  + Avoid making options in one dropdown menu change based on the input to another.
 *  + When most users will (or should) pick a particular option, make it the default.
 *  + Don't use JavaScript to automatically submit the form (or do anything else) when an option is selected. 
 *
 * Guidance
 *  + Each form control must have a unique semantic `id` attribute; its label must have the same value in its `for` attribute. 
 *  + By default, the width of all form elements is 100%, but you can adjust the width to the content adding the `.form-auto` class.
 *  + Use a standalone checkbox when a user needs to choose "yes" or "no" on only one option. For example, to toggle a setting on or off.
 */

/**
 * Text inputs:
 * Add class `.form-input` to text-based input fields and `.form-textarea` to textarea fields. 
 * 
 *
 *     @example
 *     <form action="#" method="post">
 *       <label for="fullname">Name</label>
 *       <input class="form-input" id="fullname" name="fullname" type="text">
 *       <label for="comments">Comments</label>
 *       <textarea class="form-textarea" id="comments" name="comments"></textarea>
 *       <input type="submit" class="form-input form-auto" value="Submit">
 *     </form>
 */

/**
 * Dropdowns:
 * Use class `.form-select`. 
 * 
 * Consider another solution if the list of options is very short or very long, or if a user can select more than one option.
 *
 *     @example
 *     <form action="#" method="post">
 *       <label for="badge">Select the badge type.</label>
 *       <select class="form-select" id="badge" name="badge">
 *         <option value="badge1">Badge 1</option>
 *         <option value="badge2">Badge 2</option>
 *         <option value="badge3">Badge 3</option> 
 *       </select>   
 *     </form>    
 */

/**
 * Checkboxes:
 * Use class `.form-input`. For optimal alignment, wrap each input and label pair in a `div`, and add class `.form-auto` to each input. 
 *
 * Users should be able to tap or click on the label or the checkbox to select/deselect an option.
 * 
 * Surround a related set of checkboxes with a `fieldset` element. Use the `.form-fieldset` class and include a `legend`. Do not use fieldset and legend for a single checkbox. 
 *
 *     @example
 *     <form action="#" method="post">
 *       <fieldset class="form-fieldset">
 *         <legend>What is your current or former relationship with the University? Check all that apply.</legend>
 *         <div> 
 *           <input class="form-input form-auto" id="student" name="relationship" type="checkbox" value="student">
 *           <label for="student">Student</label>
 *         </div>
 *         <div>    
 *           <input class="form-input form-auto" id="faculty-staff" name="relationship" type="checkbox"  value="faculty-staff">
 *           <label for="faculty-staff">Faculty/Staff</label> 
 *         </div> 
 *         <div>   
 *           <input class="form-input form-auto" id="retiree" name="relationship"  type="checkbox" value="retiree">
 *           <label for="retiree">Retiree</label>  
 *         </div>
 *         <div>   
 *           <input class="form-input form-auto" id="visitor" name="relationship" type="checkbox" value="visitor">
 *           <label for="visitor">Visitor</label>  
 *         </div>   
 *       </fieldset>
 *     </form>     
 */

/**
 * Radio buttons:
 * Use class `.form-input`. For optimal alignment, wrap each input and label pair in a `div`, and add class `.form-auto` to each input. 
 *
 * Users should be able to tap or click on the label or the radio button to select/deselect an option.
 * 
 * Group related radio buttons together with a `fieldset` element. Use the `.form-fieldset` class and describe the group with `legend`. 
 * 
 * Consider another solution if there is only one option, or if users should be able to select none of the options.
 * Read about [Radio Buttons UX Design](https://uxplanet.org/radio-buttons-ux-design-588e5c0a50dc#.yezz7qrwe). 
 *
 *     @example
 *     <form action="#" method="post">
 *       <fieldset class="form-fieldset">
 *         <legend>Choose a campus.</legend>
 *         <div> 
 *           <input class="form-input form-auto" id="chicago" name="campus" type="radio" value="chicago">
 *           <label for="chicago">Chicago</label>
 *         </div>
 *         <div>    
 *           <input class="form-input form-auto" id="springfield" name="campus" type="radio" value="springfield">
 *           <label for="springfield">Springfield</label> 
 *         </div> 
 *         <div>   
 *           <input class="form-input form-auto" id="urbana" name="campus" type="radio" value="urbana">
 *           <label for="urbana">Urbana</label>  
 *         </div>  
 *       </fieldset>
 *     </form>    
 */

/**
 * Inline inputs:
 * For short forms (three to four fields) that occupy a single horizontal line, wrap each label and input pair with the `.form-input-inline` class. 
 *  
 * Be sure each field is properly labeled.
 *
 *     @example
 *     <form action="#" method="post">
 *       <div class="form-input-inline">           
 *         <label for="first-name">First name</label>
 *         <input class="form-input form-auto" id="first-name" name="first-name" type="text" size="15" value="">  
 *       </div> 
 *       <div class="form-input-inline">   
 *         <label for="middle-name">Middle name</label> 
 *         <input class="form-input form-auto" id="middle-name" name="middle-name" type="text" size="15" value="">
 *       </div>  
 *       <div class="form-input-inline">  
 *         <label for="last-name">Last name</label> 
 *         <input class="form-input form-auto" id="last-name" name="last-name" type="text" size="25" value="">
 *       </div>
 *     </form>    
 */

/**
 * Date input:
 * Three text fields are the easiest way for users to enter most dates. Use this format for most dates, particularly memorized dates.
 * It may be tempting to switch all or some of these text fields to drop downs, but these tend to be more difficult to use than text boxes.
 * 
 * If users are trying to schedule something, a calendar picker might make more sense. Be sure to also provide an option for text entry as well.
 * 
 * Be sure each field is properly labeled.
 *
 *     @example
 *     <form action="#" method="post">
 *       <fieldset class="form-fieldset">
 *         <legend>Date of birth</legend>
 *         <div class="form-input-inline">           
 *           <label for="birth-month">Month</label>
 *           <input class="form-input form-auto" id="birth-month" name="birth-month" pattern="0?[1-9]|1[012]" type="text" size="2" maxlength="2" value="">  
 *         </div> 
 *         <div class="form-input-inline">   
 *           <label for="birth-day">Day</label> 
 *           <input class="form-input form-auto" id="birth-day" name="birth-day" pattern="0?[1-9]|1[0-9]|2[0-9]|3[01]" type="text" size="2" maxlength="2" value="">
 *         </div>  
 *         <div class="form-input-inline">  
 *           <label for="birth-year">Year</label> 
 *           <input class="form-input form-auto" id="birth-year" name="birth-year" pattern="[0-9]{4}" type="text" size="4" maxlength="4" value="">
 *         </div>  
 *       </fieldset>
 *     </form>    
 */

[class*="form-"] {
  display: inline-block;
  width: 100%;
  margin: 0 .375rem .75rem 0;
  padding: .375rem;
  font: inherit;
  border: 1px solid #d1e1e8;
  border-radius: 5px;
  outline: 0;
  color: inherit; 
  transition: all 0.3s;
}

.form-input[type="text"] {
  min-height: 38px;
}

.form-input[type="date"],
.form-auto {
  width: auto;
}

.form-input[type="checkbox"],
.form-input[type="radio"] {
  margin: .375rem .375rem .375rem 0;
}

.form-input[type="checkbox"] + label,
.form-input[type="radio"] + label {
  margin: 0 0 .375rem 0;
}

/*  Remove controls from Firefox  */
.form-input[type="number"] {
  -moz-appearance: textfield;
}

/*  Remove controls from Safari and Chrome  */
.form-input[type="number"]::-webkit-inner-spin-button, 
.form-input[type="number"]::-webkit-outer-spin-button { 
  margin: 0; /*  Removes leftover margin  */
  -webkit-appearance: none;
}

.form-input[disabled] {
  background-color: #d1e1e8;
  cursor: not-allowed;  
}

.form-input[type="submit"],
.form-input[type="button"]{
 margin-top: 1rem;
  margin-bottom: .75rem;
  padding: .25em 1em;
  line-height: 2;
  background-color: #0070D2;
  border: 0; 
  color: #ffffff;
  cursor: pointer;
}
.form-input-cancel[type="button"],
.form-input-cancel[type="reset"]{
 margin-top: 1rem;
  margin-bottom: .75rem;
  padding: .25em 1em;
  line-height: 2;
  background-color: #FFF;
  border: 1; 
  color: #000;
  cursor: pointer;
}
.form-input-button[type="button"] {
  margin-top: .25rem;
  margin-bottom: .25rem;
  padding: .15em .15em;
  line-height: 2;
  background-color: #0070D2;
  border: 0; 
  color: #ffffff;
  cursor: pointer;
}

.form-textarea {
  resize: vertical; 
}

.form-fieldset {
  margin: .75rem 0 0 0;
  min-width: 0;
  padding: 0;
  border: none;
  vertical-align: bottom;
}

[class*="form-"]:focus {
  border: 1px solid #0070D2; 
}

.form-input[type="submit"]:hover, 
.form-input[type="button"]:hover {
  opacity: 0.8; 
}

/*  
 * The inline class aligns inputs horizontally, with labels above each field. Labels must be block elements.  
 * This class should be applied to a div that wraps around the label and the input.
 */
.form-input-inline {
  display: inline-block;
  width: auto;
  margin-bottom: 0;
  padding: 0;
  border: none;
  vertical-align: bottom;
}

.form-input-inline > label {
  display: block;
}


/*  Hints are hidden until the input in question has focus */
.form-hint {
  position: relative;
}

/*  Hide the hint text when the input doesn't have focus */
.form-hint-text {
  clip: rect(0 0 0 0);
  position: absolute;
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  border: 0;
}

/*  Show the hint when the input has focus */
.form-hint input:focus + .form-hint-text {
  clip: auto;
  top: 100%;
  left: 50%;
  height: auto;
  width: 240px;
  margin-left: -120px; /* Half of the width, to center the tooltip */
  padding: .375rem .75rem;
  z-index: 1;
  overflow: visible;
  background: #d1e1e8;
  border: 1px solid #d1e1e8;
  transition: background 1s ease 0s;
}

 /* Arrow at the top of the tooltip */
.form-hint-text::after {
  content: "";
  position: absolute;
  bottom: 100%;  /* At the top of the tooltip */
  left: 50%;
  margin-left: -5px;
  border-width: 5px;
  border-style: solid;
  border-color: transparent transparent #d1e1e8 transparent;
}

.form-box{
display: inline-block;
  width: 100%;
  margin: .5rem .5rem .75rem 0;
  padding: 0 .5rem .75rem .75rem;
  font: inherit;
  border: 1px solid #999;
  border-radius: 5px;
  color: inherit; 
  transition: all 0.3s;
}

/*  Style placeholder text. Override default browser opacity for accessibility.  */
::-webkit-input-placeholder { /* Chrome/Opera/Safari */
  font-size: .889rem; 
  opacity: .9;  
}
::-moz-placeholder { /* Firefox 19+ */
  font-size: .889rem; 
  opacity: .9;
}



/* ***************************** 
 * Table Styles 
 * *****************************/

/***
 * Tables:
 */

/**
 * Accessibility
 *  + To make tables accessible, header cells must be marked up with `th`, and data cells with `td`. 
 *  For more complex tables, explicit associations may be needed using `scope`, `id`, and `headers` attributes.
 *  [Read more about accessible tables.](https://www.w3.org/WAI/tutorials/tables/)
 *  + The `scope` attribute identifies whether a table header is a column header or a row header.
 *  + The `thead` and `tfoot` elements define header and footer rows for tables. They provide no accessibility functionality and are generally only of use when a long table is printed.
 *  + When adding a title to a table, include it in a `caption` tag inside of the `table` element.
 *
 * Usability
 *  + Tables are great at displaying tabular data. Minimal visual styling helps surface this information more easily.
 *  + Numerical data should be right-aligned. Textual data should be left-aligned. Headers are aligned with their data. Don't use center alignment.
 *  + Keep headers as short as possible.
 *
 * Guidance
 *  + Tables have no column borders by default. Use the class `.table-bordered` to achieve column borders.
 */

/**
 * Borderless table:
 * Tables do not have column borders by default.
 * 
 *     @example
 *     table
 *       caption This is a caption for a borderless (default) table.
 *       tr
 *         th(scope="col") First name
 *         th(scope="col") Middle name
 *         th(scope="col") Last name
 *       tr
 *         td Ian
 *         td Kevin
 *         td Curtis 
 *       tr
 *         td David
 *         td Robert
 *         td Jones 
 *       tr
 *         td Robert</td>
 *         td 
 *         td Smith  
 */ 

/**
 * Bordered table:
 * Add the class `.table-bordered` to achieve column borders.
 * 
 *     @example
 *     table.table-bordered
 *       caption This is a caption for a bordered table.
 *       tr
 *         th(scope="col") First name
 *         th(scope="col") Middle name
 *         th(scope="col") Last name
 *       tr
 *         td Ian
 *         td Kevin
 *         td Curtis 
 *       tr
 *         td David
 *         td Robert
 *         td Jones 
 *       tr
 *         td Robert</td>
 *         td 
 *         td Smith  
 */  

.table-bordered,
.table-bordered tr th,
.table-bordered tr td {
  border: 1px solid #d1e1e8;
}

.table-bordered tr th {
  border-bottom: 2px solid #d1e1e8;
}

/* 
 * Styles for DataTales JQuery plug-in. 
 * Override some styles from the plug-in's CSS to be consistent with our style guide and 
 * to account for responsive layout. 
 */

[class*="dataTables_"] {
  color: #526475 !important;
}

.dataTables_info,
.dataTables_filter {
  margin-bottom: .75rem;
}

.dataTable {
  display: table;
  width: 100% !important;
  max-width: 1086px;
  margin: 1.5rem 0 !important; 
  border-collapse: collapse !important;
}

.dataTable thead th {
  padding: .75rem !important;
  border-bottom: 2px solid #d1e1e8 !important;
}

.dataTable tbody tr {
  border-bottom: 1px solid #d1e1e8 !important;
}

.dataTable tbody th, 
.dataTable tbody td {
  padding: .25rem !important;
  vertical-align: middle;
}

/*  .details-control refers to +/open icon that expands detail view  */
td.details-control {
  position: absolute;  
  height: 18px;
  width: 18px;
  margin-top: 13px;
  margin-left: -5px;
  background: #0070D2 url("ic_add_circle_outline_white_18dp_1x.png") no-repeat center center;
  background-clip: content-box;
  border: none !important;
  border-radius: 50%;
  cursor: pointer;
}

/*  Changes +/open icon to -/close icon when detail view is expanded  */
tr.parent td.details-control {
  background: #526475 url("ic_remove_circle_outline_white_18dp_1x.png") no-repeat center center;
  background-clip: content-box;
}

/*  The dataTables_filter class refers to search function on table  */
.dataTables_filter label {
  margin-top: 0;
}

.dataTables_filter input {
  margin-top: 0;
  padding: 3px;
  font: inherit;
  border: 1px solid #d1e1e8;
  border-radius: 5px;
  outline: 0;
  color: inherit; 
  transition: all 0.3s;
}

.dataTable > tbody > tr.child ul {
  list-style-type: none;
  padding-left: 2rem;
}

/*  Detail view title  */
.dtr-title {
  font-weight: 700;
  margin-right: .75rem;
}

/*  Add colon after detail view title  */
.dtr-title::after {
  content: ":";
}



/* ***************************** 
 * Panel Boxes 
 * *****************************/

/***
 * Panels:
 */

/**
 * Guidance
 *  + For callouts or other important content that is neither tabular in nature nor an alert. 
 */

/**
 * Basic panel:
 * The `.panel` class applies a border and padding to contain some content.
 *
 *     @example
 *     .panel
 *       .panel-body Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod.
 */

/**
 * Panel with heading:
 * Add a heading container to a panel with the `.panel-heading` class.
 *
 *     @example
 *     .panel
 *       .panel-heading
 *         h3.panel-title Panel title
 *       .panel-body Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod.
 */ 

.panel {
  display: block;
  margin: 1.5rem 0;
  border: 1px solid #d1e1e8;
  border-radius: 5px;
  text-align: left; 
}

.panel-body {
  padding: .75rem;
}

.panel-heading {
  padding: .75rem;
  background: #f6f8fa;
  border-bottom: 1px solid #d1e1e8;
  border-top-left-radius: 5px;
  border-top-right-radius: 5px;
}

.panel-title {
  margin: 0;
  font-size: 1rem;
  font-weight: 700;
  line-height: 1.5;  
}



/* ***************************** 
 * Alert Boxes  
 * *****************************/

/***
 * Alerts:
 */

/**
 * Accessibility
 *  + Use the ARIA `role="alert"` to inform assistive technologies of a time-sensitive and important message that is not interactive. If the message is interactive, use the `alertdialog` role.
 *  + Do not visually hide alert messages on the page and then make them visible when they are needed. 
 *  Users of older assistive technologies may still be able to perceive the alert messages even if they are not currently applicable.
 *
 * Usability
 *  + Use alerts as a notification to keep users informed of the status of the system; to alert someone that they just did something that needs to be corrected; or as confirmation that a task was completed successfully.
 *  + On long forms, always include in-line validation in addition to any error messages that appear at the top of the form.
 *  + If an action will result in destroying a user's work (for example, deleting an application) use a more intrusive pattern, such as a confirmation modal dialogue.
 *  + When the user is required to do something in response to an alert, let them know what they need to do and make that task as easy as possible. 
 *
 * Guidance
 *  + Use the `.alert` class to create a standard informational alert. Add the `.alert-[type]` class to customize the alert, where `[type]` is "done," "error," or "warning."
 */

/**
 * Alert variations:
 * 
 *     @example 
 *     div.alert
 *       div.alert-body
 *         h3.alert-heading Alert
 *         p.alert-text Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod. 
 *     div.alert.alert-done
 *       div.alert-body
 *         h3.alert-heading Done
 *         p.alert-text Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod. 
 *     div.alert.alert-error
 *       div.alert-body
 *         h3.alert-heading Error
 *         p.alert-text Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod.  
 *     div.alert.alert-warning
 *       div.alert-body
 *         h3.alert-heading Warning
 *         p.alert-text Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod.  
 */

.alert {
  display: block;
  margin: 1.5rem 0;
  padding: .75rem;
  background: #E1F5FE url("ic_info_black_36dp_1x.png") 1rem 1rem no-repeat;
  border: 1px solid #03A9F4;
  border-radius: 5px;
  text-align: left; 
}

.alert-done { 
  background: #E8F5E9 url("ic_check_circle_black_36dp_1x.png") 1rem 1rem no-repeat;    
  border-color: #4CAF50;  
}

.alert-error { 
  background: #FFEBEE url("ic_error_black_36dp_1x.png") 1rem 1rem no-repeat;  
  border-color: #F44336;  
}

.alert-warning {
  background: #FFF8E1 url("ic_warning_black_36dp_1x.png") 1rem 1rem no-repeat;  
  border-color: #FFC107;   
}

.alert-body {
  max-width: 38rem;
  padding-left: 56px;
}

.alert-heading
{
  font-weight: bold;
  padding-left: 65px;
  padding-top: 7px;
}

.alert-text {
  margin: 0px;
  padding-left: 65px;
  padding-bottom: 10px;
}   



/* ***************************** 
 * Utilities and Helper Classes  
 * *****************************/

/*  Hide visually and from screen readers. Screen readers sometimes ignore display:none.  */
.u-hidden {
  display: none !important;
  visibility: hidden;
}

/*  Hide only visually, but have it available for screen readers  */
.u-visuallyhidden {
  clip: rect(0 0 0 0);
  position: absolute;
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  border: 0;
}

/*  Hide visually and from screen readers, but maintain layout  */
.u-invisible { 
  visibility: hidden; 
}

/*  Single-declaration utility classes  */
.u-align-center { text-align: center; }
.u-align-right { text-align: right; }

.u-border-bottom { border-bottom: 1px solid #d1e1e8; }
.u-border-top { border-top: 1px solid #d1e1e8; }

.u-font-bold { font-weight: 700; }
.u-font-reg { font-weight: 400; }
.u-font-small { font-size: .889rem; }

.u-padding-half { padding: 1rem 2rem; }

/*  Use when you want space/space/bullet/space/space to separate text items (for example, in header/footer)  */
.u-dot::after { 
  content: "\00a0 \00a0 \2022 \00a0 \00a0"; 
  display: inline-block;
}



/* ***************************** 
 * Media Queries  
 * *****************************/

/*  
 * Media queries adjust elements based on width of viewport.  
 */

  /*  Give elements (form elements, for example) 100% on tablet-sized viewport  */
@media screen and (max-width: 61.875em) {
  .tablet-full {
    width: 100%;
  }

  /*  Adjust position of tooltip hint */
  .form-hint input:focus + .form-hint-text {
    top: 50%;
    left: 340px;
    margin-top: -14px;
  }

  /* Arrow moves to left of the tooltip */
  .form-hint-text::after {
    left: 0;
    top: 45%;
    right: 240px;
    margin-left: -10px;
    border-color: transparent #d1e1e8 transparent transparent;
  }
} 

@media screen and (max-width: 48em) {
  header [class*="flex-item"] {
    flex: 1 0 100%;
    text-align: center;
    font-size: 1rem;
  }

  header [class*="flex-item"] li {
    line-height: 2;
  }

  /*  Change display of DataTables info/search elements for smaller viewports  */
  .dataTables_info,
  .dataTables_filter {
    float: left !important;
    clear: both !important;
    text-align: left !important;
  }
}

@media screen and (max-width: 32em) {
  /*  Adjust tooltip position and width  */
  .form-hint input:focus + .form-hint-text {
    left: 290px;
    width: 120px;
  }

  .form-hint-text::after {
    top: 20%;
  }
}  

@media screen and (max-width: 22.5em) {
  .dataTables_filter label {
    display: block; !important;
  }

  .dataTables_filter input {
    margin-left: 0 !important;
    display: block; !important;
  }
}

/************************************************************
BEGIN /// CODE FOR RESPONSIVE 4 COLUMN DISPLAY
************************************************************/
/* 1 column: 320px */
.autowide {
  margin: 0 auto;
	width: 100%;
}
.autowide img {
  float: left;
  margin: 0 .75rem 0 0;
}
.autowide .module {
  border-radius: .25rem;
  margin-bottom: 1rem;
}
.autowide .module p {
  padding: .25rem .75rem;
}

/* 2 columns: 600px */
@media only screen and (min-width: 600px) {
  .autowide .module {
		float: left;
		margin-right: 2.564102564102564%;
		width: 48%;
	}
	.autowide .module:nth-child(2n+0) {
		margin-right: 0;
	}
}

/* 3 columns: 768px */
@media only screen and (min-width: 768px) {
  .autowide .module {
		width: 31.623931623931625%;
	}
	.autowide .module:nth-child(2n+0) {
		margin-right: 2.564102564102564%;
	}
	.autowide .module:nth-child(3n+0) {
		margin-right: 0;
	}
}

/* 4 columns: 992px and up */
@media only screen and (min-width: 992px) {
  .autowide .module {
		width: 27%;
	}
	.autowide .module:nth-child(3n+0) {
		margin-right: 2.564102564102564%;
	}
	.autowide .module:nth-child(4n+0) {
		margin-right: 0;
	}
}
/************************************************************
END ////  CODE FOR RESPONSIVE 4 COLUMN DISPLAY
************************************************************/
.cfdebug * {
  margin: 0;
  padding: 0;  
  max-width: 90vw;
} 
 

